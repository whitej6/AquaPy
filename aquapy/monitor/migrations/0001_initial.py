# Generated by Django 3.0.7 on 2020-06-28 23:18
from datetime import datetime
import os

from django.contrib.auth import get_user_model
from django.db import migrations, models
from scheduler.models import RepeatableJob

from monitor.models import I2CSensor, InfluxDB, I2CJob
from monitor.atlas_i2c import AtlasI2C

SENSORS = [
    {
        'address' : 97,
        'name' : 'Disvoled Oxygen',
        'slug' : 'do'
    },
    {
        'address' : 98,
        'name' : 'ORP',
        'slug' : 'orp'
    },
    {
        'address' : 99,
        'name' : 'pH',
        'slug' : 'ph'
    },
    {
        'address' : 100,
        'name' : 'Embedded Conductivity (Salinity)',
        'slug' : 'ec'
    },
    {
        'address' : 102,
        'name' : 'Temperature',
        'slug' : 'temp'
    },
    {
        'address' : 104,
        'name' : 'Flow',
        'slug' : 'flow'
    },
    {
        'address' : 105,
        'name' : 'CO2',
        'slug' : 'co2'
    },
]

def get_devices():
    device = AtlasI2C()
    device_address_list = device.list_i2c_devices()
    device_list = []
    for i in device_address_list:
        device.set_i2c_address(i)
        response = device.query("I")
        moduletype = response.split(",")[1] 
        response = device.query("name,?").split(",")[1]
        device_list.append(AtlasI2C(address = i, moduletype = moduletype, name = response))
    return device_list

def initial_data(apps, schema_editor):
    for sensor in SENSORS:
        I2CSensor.objects.create(address=sensor['address'], name=sensor['name'], slug=sensor['slug'])

    http = 'http://'
    if os.environ.get('INFLUXDB_SSL'):
        http = 'https://'
    port = os.environ.get('INFLUXDB_PORT', '')
    if port:
        base_url = f'{http}{os.environ.get("INFLUXDB_HOST")}:{port}/'
    else:
        base_url = f'{http}{os.environ.get("INFLUXDB_HOST")}/'

    influxdb = InfluxDB.objects.create(
        base_url=base_url,
        measurement=os.environ.get('INFLUXDB_MEASUREMENT'),
        database=os.environ.get('INFLUXDB_DB')
    )
    device = AtlasI2C()
    for i in range(0, 128):
        try:
            device.set_i2c_address(i)
            device.read(1)
            try:
                obj = I2CSensor.objects.get(address=i)
                I2CJob.objects.create(
                    sensor=obj,
                    name=f'{obj.name} Query',
                    influxdb=influxdb
                )
            except I2CSensor.DoesNotExist:
                pass
        except IOError:
            pass
    
    RepeatableJob.objects.create(
        name='Query Sensors',
        callable='monitor.worker.query_sensors',
        enabled=True,
        queue='default',
        interval=1,
        interval_unit='minutes',
        scheduled_time=datetime.now()
    )

    user = get_user_model().objects.create(
        username='aquapy',
        is_staff=True,
        is_superuser=True
    )
    user.set_password('aquapy')
    user.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scheduler', '0005_added_result_ttl'),
    ]

    operations = [
        migrations.CreateModel(
            name='I2CSensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='InfluxDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_url', models.URLField(max_length=255)),
                ('database', models.CharField(max_length=255)),
                ('measurement', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='I2CJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('influxdb', models.ForeignKey(on_delete=models.deletion.CASCADE, to='monitor.InfluxDB')),
                ('sensor', models.ForeignKey(on_delete=models.deletion.CASCADE, to='monitor.I2CSensor')),
            ],
        ),
        migrations.RunPython(
            code=initial_data
        )
    ]
